Patch for conn.c from http://aur.archlinux.org/packages/mpdscribble/mpdscribble/0001-Ported-to-libsoup-2.4.patch
--- mpdscribble-0.2.12/configure.in	2006-12-03 15:03:18.000000000 +0000
+++ mpdscribble-0.2.12/configure.in	2008-09-03 18:09:23.000000000 +0000
@@ -12,7 +12,7 @@
 AC_SUBST(libgthread_CFLAGS)
 AC_SUBST(libgthread_LIBS)
 
-PKG_CHECK_MODULES([libsoup],[libsoup-2.2],,[AC_MSG_ERROR([libsoup-2.2 not found])])
+PKG_CHECK_MODULES([libsoup],[libsoup-2.4],,[AC_MSG_ERROR([libsoup-2.4 not found])])
 AC_SUBST(libsoup_CFLAGS)
 AC_SUBST(libsoup_LIBS)
 
--- mpdscribble-0.2.12/conn.c
+++ mpdscribble-0.2.12/conn.c
@@ -31,7 +31,7 @@
 
 struct global {
   SoupSession *session;
-  SoupUri *base_uri;
+  SoupURI *base_uri;
   char *base;
   int pending;
   char *receive;
@@ -51,19 +51,21 @@ conn_grow_buffer (size_t new)
 }
 
 static void
-conn_callback (SoupMessage * msg, gpointer uri)
+conn_callback (SoupSession * session, SoupMessage * msg, gpointer uri)
 {
   size_t l;
 
   if (SOUP_STATUS_IS_SUCCESSFUL (msg->status_code))
     {
-      l = msg->response.length;
+      l = msg->response_body->length;
       conn_grow_buffer (g.count + l);
-      memcpy (g.receive + g.count, msg->response.body, l);
+      memcpy (g.receive + g.count, msg->response_body->data, l);
       g.count += l;
     }
 
-  soup_uri_free (uri);
+  if (uri)
+    soup_uri_free (uri);
+  
   if (!--g.pending)
     {
       g.callback (g.count, g.receive);
@@ -114,11 +116,11 @@ conn_initiate (char *url, callback_t *callback, char *post_data,
       msg = soup_message_new (SOUP_METHOD_POST, g.base);
       soup_message_set_request
         (msg, "application/x-www-form-urlencoded",
-         SOUP_BUFFER_USER_OWNED, post_data, strlen (post_data));
-      soup_message_add_header (msg->request_headers, "User-Agent", 
+         SOUP_MEMORY_COPY, post_data, strlen (post_data));
+      soup_message_headers_append (msg->request_headers, "User-Agent", 
                                AS_CLIENT_ID "/" AS_CLIENT_VERSION);
-      soup_message_add_header (msg->request_headers, "Pragma", "no-cache");
-      soup_message_add_header (msg->request_headers, "Accept", "*/*");
+      soup_message_headers_append (msg->request_headers, "Pragma", "no-cache");
+      soup_message_headers_append (msg->request_headers, "Accept", "*/*");
     }
   else
     {
